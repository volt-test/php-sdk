name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: PHP Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      # PHP installation and setup using built-in tools
      - name: Setup PHP (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php8.2 php8.2-cli php8.2-xml php8.2-curl php8.2-mbstring
          php -v
        shell: bash

      - name: Setup PHP (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install php@8.2
          brew link php@8.2 --force
          php -v
        shell: bash

      - name: Setup PHP (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install php --version=8.2
          php -v

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          if [ "$RUNNER_OS" == "Windows" ]; then
            php composer-setup.php
            mv composer.phar /usr/local/bin/composer
          else
            sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          fi
          php -r "unlink('composer-setup.php');"
          composer --version
        shell: bash

      - name: Validate composer.json
        run: composer validate
        shell: bash

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        shell: bash

      - name: Run test suite
        run: vendor/bin/phpunit
        shell: bash

      - name: Verify binary installation
        run: |
          php -r "require 'vendor/autoload.php'; new VoltTest\Platform();"
        shell: bash

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}
          path: |
            ./build/logs
            ./phpunit.xml
            ./coverage.xml

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP and tools
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php8.2 php8.2-cli php8.2-xml php8.2-mbstring
          curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
          composer global require phpstan/phpstan
          echo "${HOME}/.composer/vendor/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHPStan
        run: phpstan analyse src tests --level=5

  code-style:
    name: Code Style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP and tools
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php8.2 php8.2-cli php8.2-xml php8.2-mbstring
          curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
          composer global require friendsofphp/php-cs-fixer
          echo "${HOME}/.composer/vendor/bin" >> $GITHUB_PATH

      - name: Check coding standards
        run: php-cs-fixer fix --dry-run --diff