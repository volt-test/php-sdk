name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: PHP Tests - ${{ matrix.os }} - PHP ${{ matrix.php }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        php: [8.0 ,8.1 ,8.2, 8.3]
    steps:
      - uses: actions/checkout@v4

      # PHP installation and setup using built-in tools
      - name: Setup PHP (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php php-cli php-xml php-curl php-mbstring
          php -v
        shell: bash

      - name: Setup PHP (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install php
          brew link php --force
          php -v
        shell: bash

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-



      - name: Run test suite
        run: vendor/bin/phpunit
        shell: bash

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}
          path: |
            ./build/logs
            ./phpunit.xml
            ./coverage.xml

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php php-cli php-xml php-mbstring
        shell: bash

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
          sudo chmod +x /usr/local/bin/composer
          mkdir -p ~/.composer
          sudo chown -R $USER:$USER ~/.composer
        shell: bash

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: |
          composer install --prefer-dist --no-progress
          composer require --dev phpstan/phpstan --with-all-dependencies
        shell: bash

      - name: Create PHPStan config
        run: |
          echo '
          parameters:
              level: 5
              paths:
                  - src
                  - tests
              excludePaths:
                  - vendor/*
          ' > phpstan.neon

      - name: Run PHPStan
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse -c phpstan.neon
          else
            echo "PHPStan not found in vendor/bin"
            exit 1
          fi
        shell: bash

  code-style:
    name: Code Style
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php php-cli php-xml php-mbstring
        shell: bash

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
          sudo chmod +x /usr/local/bin/composer
          mkdir -p ~/.composer
          sudo chown -R $USER:$USER ~/.composer
        shell: bash

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: |
          composer install --prefer-dist --no-progress
          composer require --dev friendsofphp/php-cs-fixer --with-all-dependencies
        shell: bash

      - name: Create PHP CS Fixer config
        run: |
          echo "<?php
          return (new PhpCsFixer\Config())
              ->setRules([
                  '@PSR2' => true,
                  'array_syntax' => ['syntax' => 'short'],
                  'no_unused_imports' => true,
                  'ordered_imports' => true,
              ])
              ->setFinder(
                  PhpCsFixer\Finder::create()
                      ->exclude('vendor')
                      ->in(__DIR__)
              );
          " > .php-cs-fixer.php

      - name: Check coding standards
        run: vendor/bin/php-cs-fixer fix --dry-run --diff